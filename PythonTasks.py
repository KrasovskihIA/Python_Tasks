"""
Дан набор точек на координатной плоскости. Необходимо подсчитать и вывести количество точек, лежащих в каждой координатной четверти.
Формат входных данных
В первой строке записано количество точек. Каждая следующая строка состоит из двух целых чисел — координат точки (сначала абсцисса – xx, затем ордината – yy), разделенных символом пробела.

Формат выходных данных
Программа должна вывести количество точек, лежащих в каждой координатной четверти, как в примерах.

Примечание. Учтите, что точки, лежащие на осях координат, не принято относить к какой либо координатной четверти.
"""
number = int(input())
first, second, third, fourth = 0, 0, 0, 0

for _ in range(number):
    x, y = map(int, input().split())
    first += x > 0 and y > 0
    second += x < 0 and y > 0
    third += x < 0 and y < 0
    fourth += x > 0 and y < 0

print(f"Первая четверть: {first}")
print(f"Вторая четверть: {second}")
print(f"Третья четверть: {third}")
print(f"Четвертая четверть: {fourth}")


"""
На вход программе подается строка текста из натуральных чисел. Из неё формируется список чисел. Напишите программу подсчета количества чисел, которые больше предшествующего им в этом списке числа, то есть, стоят вслед за меньшим числом. 

Формат входных данных
На вход программе подается строка текста из разделенных пробелами натуральных чисел.

Формат выходных данных
Программа должна вывести одно число – количество элементов списка, больших предыдущего.
"""
numbers = [int(n) for n in input().split()]
counter = 0

for i in range(1, len(numbers)):
    if numbers[i] > numbers[i - 1]:
        counter += 1
        
print(counter)


"""
На вход программе подается строка текста из натуральных чисел. Из элементов строки формируется список чисел. Напишите программу, которая меняет местами соседние элементы списка (a[0] c a[1], a[2] c a[3] и т.д.). Если в списке нечетное количество элементов, то последний остается на своем месте.

Формат входных данных
На вход программе подается строка текста, содержащая натуральные числа, разделенные пробелами.

Формат выходных данных
Программа должна вывести измененный список, разделяя его элементы одним пробелом.

"""
a = [int(i) for i in input().split()]
for i in range(0, len(a) - 1, 2):
    a[i], a[i + 1] = a[i + 1], a[i]
print (*a)



"""
На вход программе подается строка текста из натуральных чисел. Из элементов строки формируется список чисел. Напишите программу циклического сдвига элементов списка направо, когда последний элемент становится первым, а остальные сдвигаются на одну позицию вперед, в сторону увеличения индексов.

Формат входных данных
На вход программе подается строка текста из разделенных пробелами натуральных чисел.

Формат выходных данных
Программа должна вывести элементы измененного списка с циклическим сдвигом, разделяя его элементы одним пробелом.

"""

a = [int(i) for i in input().split()]
a.insert(0, a[-1])
del a[-1]
print (*a)


"""
На вход программе подается строка текста, содержащая натуральные числа, расположенные по неубыванию. Из строки формируется список чисел. Напишите программу для подсчета количества разных элементов в списке.

Формат входных данных
На вход программе подается строка текста, содержащая натуральные числа, разделенные символом пробела, расположенные по неубыванию.

Формат выходных данных
Программа должна вывести одно число – количество различных элементов списка.

"""

a = [int(i) for i in input().split()]
print(len(set(a)))


"""
Напишите программу для определения, является ли число произведением двух чисел из данного набора, выводящую результат в виде ответа «ДА» или «НЕТ».

Формат входных данных
В первой строке подаётся число n\, (0 < n < 1000)n(0<n<1000) – количество чисел в наборе. В последующих nn строках вводятся целые числа, составляющие набор (могут повторяться). Затем следует целое число, которое является или не является произведением двух каких-то чисел из набора.

Формат выходных данных
Программа должна вывести «ДА» или «НЕТ» в соответствии с условием задачи.

Примечание 1. Само на себя число из набора умножиться не может, другими словами, два множителя должны иметь разные индексы в наборе.

Примечание 2. Для решения задачи используйте вложенные циклы.

"""

l = [int(input()) for n in range(int(input()))]
n = int(input())
fl = False 

for i in range(len(l)):
    for j in range(i + 1, len(l)):
        if l[i] * l[j] == n:
            fl = True
            break
            
print('ДА' if fl == True else 'НЕТ')






"""
Тимур и Руслан пытаются разделить фронт работы по курсу "Python для профессионалов". Для этого они решили сыграть в камень, ножницы и бумагу. Помогите ребятам бросить честный жребий и определить, кто будет делать очередной модуль нового курса.

Формат входных данных
На вход программе подаются две строки текста, содержащие слова "камень", "ножницы" или "бумага". На первой строке записан выбор Тимура, на второй – выбор Руслана.

Формат выходных данных
Программа должна вывести результат жеребьёвки, то есть кто победит Тимур, Руслан или они сыграют вничью.

"""


a,b = str(input()),str(input())
m = {'камень-камень': 'ничья', 'камень-ножницы': 'Тимур', 'камень-бумага': 'Руслан',
     'ножницы-ножницы': 'ничья','ножницы-бумага': 'Тимур', 'ножницы-камень': 'Руслан',
     "бумага-бумага": 'ничья','бумага-камень': 'Тимур','бумага-ножницы': 'Руслан'}
print(m[f"{a}-{b}"])



"""
Проиграв 1010 раз Тимуру, Руслан понял, что так дело дальше не пойдет, и решил усложнить игру. Теперь Тимур и Руслан играют в игру Камень, ножницы, бумага, ящерица, Спок. Помогите ребятам вновь бросить честный жребий и определить, кто будет делать следующий модуль в новом курсе.

Формат входных данных
На вход программе подаются две строки текста, содержащие по одному слову из перечня "камень", "ножницы", "бумага", "ящерица" или "Спок". На первой строке записан выбор Тимура, на второй – выбор Руслана.

Формат выходных данных
Программа должна вывести результат жеребьёвки: кто победил - Тимур или Руслан, или они сыграли вничью.

Примечание. Правила игры стандартные: ножницы режут бумагу. Бумага заворачивает камень. Камень давит ящерицу, а ящерица травит Спока, в то время как Спок ломает ножницы, которые, в свою очередь, отрезают голову ящерице, которая ест бумагу, на которой улики против Спока. Спок испаряет камень, а камень, разумеется, затупляет ножницы.

"""

a,b = str(input()),str(input())
m = {'камень-камень': 'ничья', 'камень-ножницы': 'Тимур', 'камень-бумага': 'Руслан',
        'камень-ящерица': 'Тимур', 'камень-Спок': 'Руслан', 'ножницы-ножницы': 'ничья',
        'ножницы-бумага': 'Тимур', 'ножницы-камень': 'Руслан', 'ножницы-ящерица': 'Тимур',
        'ножницы-Спок': 'Руслан', 'бумага-бумага': 'ничья', 'бумага-камень': 'Тимур',
        'бумага-ножницы': 'Руслан', 'бумага-ящерица': 'Руслан', 'бумага-Спок': 'Руслан',
        'ящерица-ящерица': 'ничья', 'ящерица-Спок': 'Тимур', 'ящерица-ножницы': 'Руслан',
        'ящерица-бумага': 'Тимур', 'ящерица-камень': 'Руслан', 'Спок-Спок': 'ничья',
        'Спок-ножницы': 'Тимур', 'Спок-бамага': 'Руслан', 'Спок-камень': 'Тимур',
        'Спок-ящерица': 'Руслан'}
print(m[f"{a}-{b}"])



"""
Дана строка текста, состоящая из букв русского алфавита "О" и "Р". Буква "О" – соответствует выпадению Орла, а буква "Р" – соответствует выпадению Решки. Напишите программу, которая подсчитывает наибольшее количество подряд выпавших Решек.

Формат входных данных
На вход программе подается строка текста, состоящая из букв русского алфавита "О" и "Р".

Формат выходных данных
Программа должна вывести наибольшее количество подряд выпавших Решек.

Примечание. Если выпавших Решек нет, то необходимо вывести число 00.
"""

a = str(input()).split('О')
print(len(max(a)))



"""
Необходимо написать программу, реализующую алгоритм написания этой песни. Алгоритм выводит в конце предложения следующую в алфавитном порядке букву, если она встречается в строке текста, а очередную строку отображает уже без этой буквы.

Формат входных данных
На вход программе подается одно слово, записанное строчными русскими буквами без буквы "ё".

Формат выходных данных
Программа должна вывести в соответствии с указанным алгоритмом строки, количество которых равно количеству разных букв в строке, которая получается путем конкатенации введенного слова и строки "запретил букву".

"""

word = input() + ' запретил букву'
alpha = [chr(i) for i in range(1072, 1104)]

for letter in alpha:
    if letter in word:
        print(word, letter)
        word = word.replace(letter, '').replace('  ', ' ').strip()




"""
Дополните приведенный код так, чтобы он выводил единственное число: сумму всех чисел списка list1 разделённую на общее количество всех чисел.

"""

list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
total = 0
counter = 0
for i in list1:
    for j in i:
        total += j
        counter += 1
print(total/counter)


"""
На вход программе подается число nn. Напишите программу, которая создает и выводит построчно список, состоящий из nn списков [[1, 2, ..., n], [1, 2, ..., n], ..., [1, 2, ..., n]].

Формат входных данных
На вход программе подается натуральное число nn.

Формат выходных данных
Программа должна вывести построчно указанный список.

"""

n = int(input())
my_list = [[j for j in range(1, n + 1)] for i in range(1, n + 1)]
print(*my_list, sep='\n')


"""
На вход программе подается число nn. Напишите программу, которая создает и выводит построчно вложенный список, состоящий из nn списков [[1], [1, 2], [1, 2, 3], ..., [1, 2, ..., n]].

Формат входных данных
На вход программе подается натуральное число nn.

Формат выходных данных
Программа должна вывести построчно указанный вложенный список.

"""

n = int(input())
my_list = [[j for j in range(1, i + 1)] for i in range(1, n + 1)]
print(*my_list, sep='\n')


"""
Треугольник Паскаля — бесконечная таблица биномиальных коэффициентов, имеющая треугольную форму. В этом треугольнике на вершине и по бокам стоят единицы. Каждое число равно сумме двух расположенных над ним чисел.

0:      1
1:     1 1
2:    1 2 1
3:   1 3 3 1
4:  1 4 6 4 1
      .....
На вход программе подается число nn. Напишите программу, которая возвращает указанную строку треугольника Паскаля в виде списка (нумерация строк начинается с нуля).

Формат входных данных
На вход программе подается число n \, (n \ge 0)n (n≥0).

Формат выходных данных
Программа должна вывести указанную строку треугольника Паскаля в виде списка.

Примечание 1. Решение удобно оформить в виде функции pascal(), которая принимает номер строки и возвращает соответствующую строку треугольника Паскаля.

Примечание 2. Графическая иллюстрация формирования треугольника Паскаля.

"""



n = int(input())
s = []
for i in range(n+1):
    row=[1]*(i+1)
    for j in range(i+1):
        if j!=i and j!=0: row[j] = s[i-1][j-1]+s[i-1][j]
    s.append(row)
print(s[n] if n!=0 else [1])


"""
На вход программе подается натуральное число nn. Напишите программу, которая выводит первые nn строк треугольника Паскаля.

Формат входных данных
На вход программе подается число n \, (n \ge 1)n (n≥1).

Формат выходных данных
Программа должна вывести первые nn строк треугольника Паскаля, каждую на отдельной строке в соответствии с образцом.

"""

n = int(input())
P=[]
for i in range(0,n):
    row=[1]*(i+1)
    for j in range(i+1):
        if j!=0 and j!=i:
            row[j]=P[i-1][j-1]+P[i-1][j]
    P.append(row)

for r in P:
    print(*r)



"""
На вход программе подается строка текста, содержащая символы. Напишите программу, которая упаковывает последовательности одинаковых символов заданной строки в подсписки.

Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела.

Формат выходных данных
Программа должна вывести указанный вложенный список.
"""

res = []

for el in input().split():
    if res and el in res[-1]:
        res[-1].append(el)
    else:
        res.append([el])

print(res)


"""
На вход программе подаются две строки, на одной символы, на другой число nn. Из первой строки формируется список.

Реализуйте функцию chunked(), которая принимает на вход список и число, задающее размер чанка (куска), а возвращает список из чанков указанной длины.

Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела и число nn на отдельной строке.

Формат выходных данных
Программа должна вывести указанный вложенный список.

Примечание. Не забудьте вызвать функцию chunked(), чтобы вывести результат 😀.
"""

def chunked(st, n):
    st = st.split()
    a = [[] for _ in range(0, len(st), n)]
    for i in range(len(a)):
        a[i].extend(st[:n])
        st = st[n:]
    return a

string = input()
num = int(input())

print(chunked(string, num))


"""
Подсписок — часть другого списка. Подсписок может содержать один элемент, несколько, и даже ни одного. Например, [1], [2], [3] и [4] — подсписки списка [1, 2, 3, 4]. Список [2, 3] — подсписок списка [1, 2, 3, 4], но список [2, 4] не подсписок списка [1, 2, 3, 4], так как элементы 22 и 44 во втором списке не смежные. Пустой список — подсписок любого списка. Сам список — подсписок самого себя, то есть список [1, 2, 3, 4] подсписок списка [1, 2, 3, 4].

На вход программе подается строка текста, содержащая символы. Из данной строки формируется список. Напишите программу, которая выводит список, содержащий все возможные подсписки списка, включая пустой список.

Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела.

Формат выходных данных
Программа должна вывести указанный список, содержащий все возможные подсписки, включая пустой список в соответствии с примерами.

Примечание. Порядок списков одинаковой длины должен соответствовать порядку их вхождения в основной список.
"""

n=input().split()
o=[[]]
k=1
while k!=len(n)+1:
  for j in range(len(n)):
    if len(n[j:j+k])==k:
      o.append(n[j:j+k])
  k+=1
print (o)

"""
На вход программе подаются два натуральных числа nn и mm, каждое на отдельной строке — количество строк и столбцов в матрице. Далее вводятся сами элементы матрицы — слова, каждое на отдельной строке; подряд идут элементы сначала первой строки, затем второй, и т.д.

Напишите программу, которая сначала считывает элементы матрицы один за другим, затем выводит их в виде матрицы.

Формат входных данных
На вход программе подаются два числа nn и mm — количество строк и столбцов в матрице, далее идут n \times mn×m слов, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести считанную матрицу, разделяя ее элементы одним пробелом.
"""

m, n, matrix = int(input()), int(input()), []
for i in range(m):
    matrix.append([input() for _ in range(n)])
    print(*matrix[i])


"""
На вход программе подаются два натуральных числа nn и mm, каждое на отдельной строке — количество строк и столбцов в матрице. Далее вводятся сами элементы матрицы — слова, каждое на отдельной строке; подряд идут элементы сначала первой строки, затем второй, и т.д.

Напишите программу, которая считывает элементы матрицы один за другим, выводит их в виде матрицы, выводит пустую строку, и снова ту же матрицу, но уже поменяв местами строки со столбцами: первая строка выводится как первый столбец, и так далее.

Формат входных данных
На вход программе подаются два числа nn и mm — количество строк и столбцов в матрице, далее идут n \times mn×m слов, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести считанную матрицу, за ней пустую строку, и ту же матрицу, но поменяв местами строки со столбцами. Элементы матрицы разделять одним пробелом.
"""

rows, cols = int(input()), int(input())
matrix = [[input() for _ in range(cols)] for i in range(rows)]
for i in matrix:
    print(*i)
print()
    
for i in range(cols):
    for x in range(rows):
        print( matrix[x][i], end=' ')
    print()


"""
Следом квадратной матрицы называется сумма элементов главной диагонали. Напишите программу, которая выводит след заданной квадратной матрицы.

Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы (целые числа) построчно через пробел.

Формат выходных данных
Программа должна вывести одно число — след заданной матрицы.


"""

n = int(input())
matrix = [[0]*n for i in range(n)]
for i in range(n):
    matrix[i] = input().split()

sum_first_diagonal = sum(int(matrix[i][i]) for i in range(n))
print(sum_first_diagonal)

"""
Напишите программу, которая выводит количество элементов квадратной матрицы в каждой строке, больших среднего арифметического элементов данной строки.

Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы (целые числа) построчно через пробел.

Формат выходных данных
Программа должна вывести nn чисел — для каждой строки количество элементов матрицы, больших среднего арифметического элементов данной строки.
"""

n = int(input())
l = [input().split() for _ in range(n)]
counter = 0
for i in l:
    sr = (sum(list(map(int, i)))) / len(i)
    for j in i:
        if int(j) > sr:
            counter += 1
    print(counter)
    counter = 0


"""
Напишите программу, которая выводит максимальный элемент в заштрихованной области квадратной матрицы.



Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы (целые числа) построчно через пробел.

Формат выходных данных
Программа должна вывести одно число — максимальный элемент в заштрихованной области квадратной матрицы.

Примечание. Элементы главной диагонали также учитываются.
"""

n = int(input())
arr = []
mtr = [[int(i) for i in input().split()] for j in range(n)]
for i in range(n):
    for j in range(n):
        if i >= j:
            arr.append(mtr[i][j])
print(max(arr))

"""
Напишите программу, которая выводит максимальный элемент в заштрихованной области квадратной матрицы.



Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы (целые числа) построчно через пробел.

Формат выходных данных
Программа должна вывести одно число — максимальный элемент в заштрихованной области квадратной матрицы.

Примечание. Элементы главной диагонали также учитываются.
"""


n = int(input())
s = []

for i in range(n):
    f = [int(i) for i in input().split()]
    for j in range(len(f)):
        if (i >= j and i <= n - 1 -j) or (i <= j and i >= n - 1 -j) or (i == j) or (i + j + 1 == n):
            s.append(f[j])

print(max(s))


"""
На вход программе подаются два натуральных числа nn и mm — количество строк и столбцов в матрице. Создайте матрицу mult размером n \times mn×m и заполните её таблицей умножения по формуле mult[i][j] = i * j.

Формат входных данных
На вход программе на разных строках подаются два числа nn и mm — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести таблицу умножения отводя на вывод каждого числа ровно 33 символа (для этого используйте строковый метод ljust()).
"""

n, m = int(input()), int(input())

for i in range(n):
    for j in range(m):
        if j != m - 1:
            print(str((i * j)).ljust(2), end=' ')
        else:
            print(str((i * j)), end='')
    print()


"""
Напишите программу, которая поворачивает квадратную матрицу чисел на 90^{\circ}90 
∘
  по часовой стрелке.

Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы построчно через пробел.

Формат выходных данных
Программа должна вывести результат на экран, числа должны быть разделены одним пробелом.
"""

n=int(input())
matrix = []

for i in range(n):
    temp = [int(num) for num in input().split()]
    matrix.append(temp)

for j in range(n):
    for i in range(n-1, -1, -1):
        print(matrix[i][j], end = ' ')
    print()


"""
На вход программе подаются два натуральных числа nn и mm. Напишите программу для создания матрицы размером n \times mn×m, заполнив её символами . и * в шахматном порядке. В левом верхнем углу должна стоять точка. Выведите полученную матрицу на экран, разделяя элементы пробелами.

Формат входных данных
На вход программе на одной строке подаются два натуральных числа nn и mm — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести матрицу, описанную в условии задачи.
"""

x, y = [int(i) for i in input().split()]

matrix = [['.'] * y for _ in range(x)]

for i in range(x):
    if i == 0 or i % 2 == 0:
        for j in range(1, y, 2):
            matrix[i][j] = '*'
    else:
        for j in range(0, y, 2):
            matrix[i][j] = '*'

for row in matrix:
    print(*row)


"""
На вход программе подается натуральное число nn. Напишите программу, которая создает матрицу размером n \times nn×n и заполняет её по следующему правилу:

числа на побочной диагонали равны 11;
числа, стоящие выше этой диагонали, равны 00;
числа, стоящие ниже этой диагонали, равны 22.
Полученную матрицу выведите на экран. Числа в строке разделяйте одним пробелом.

Формат входных данных
На вход программе подается натуральное число nn — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести матрицу в соответствии с условием задачи.

Примечание. Побочная диагональ — это диагональ, идущая из правого верхнего в левый нижний угол матрицы.
"""

n = int(input())
matrix = [[0]*n for _ in range(n)]

for i in range(n):
    matrix[i][n-1-i] = 1
    for j in range(n):
        if i > n- 1- j:
            matrix[i][j] = 2
        print(matrix[i][j], end = " ")
    print()


"""
На вход программе подается натуральное число n. Напишите программу, которая создает матрицу размером n×n заполнив её в соответствии с образцом.
"""

n = int(input())

matrix = []
for i in range(n):
    ii = n - i - 1
    row = [1 if i == j or ii == j else 0 for j in range(n)]
    matrix.append(row)
    
for row in matrix:
    print(*row)

"""
На вход программе подается натуральное число n. Напишите программу, которая создает матрицу размером n×n заполнив её в соответствии с образцом.
"""
n = int(input())

for i in range(n):
    result =[]
    for j in range(n):
        if (i >= j and i >= n - 1 - j) or (i <= j and i <= n - 1 - j):
            result.append(1)
        else:
            result.append(0)
    print(*result)


"""
Напишите программу для вычисления суммы двух матриц.На вход программе подаются два натуральных числа nn и mm — количество строк и столбцов в матрицах, затем элементы первой матрицы, затем пустая строка, далее следуют элементы второй матрицы.
"""
n, m = [int(i) for i in input().split()]
matrix1 = [[int(i) for i in input().split()] for _ in range(n)]
a = input()
matrix2 = [[int(i) for i in input().split()] for _ in range(n)]
matrix3 = [[0] * m for _ in range(n)]

for i in range(n):
    for j in range(m):
        matrix3[i][j] += matrix1[i][j] + matrix2[i][j]

for row in matrix3:
    print(*row)


"""
На вход программе подается строка текста, содержащая символы и число nn. Из данной строки формируется список. Напишите программу, которая разделяет список на вложенные подсписки так, что nn последовательных элементов принадлежат разным подспискам.

Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела и число nn на отдельной строке.

Формат выходных данных
Программа должна вывести указанный вложенный список.

"""

l ,n,l1,c= input().split(),int(input()),[],0
for i in l:
   l1 += [l[c::n]]
   c += 1
   if c == n:
       break
print(l1)


"""
Транспонирование матрицы
Напишите программу, которая транспонирует квадратную матрицу.

Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы.

Формат выходных данных
Программа должна вывести транспонированную матрицу.

Примечание 1. Транспонированная матрица — матрица, полученная из исходной матрицы заменой строк на столбцы.

Примечание 2. Задачу можно решить без использования вспомогательного списка. 

"""

n = int(input())
matrix = [list(map(int, input().split())) for i in range(n)]
for i in zip(*matrix):
    print(*i)



"""
На вход программе подается нечетное натуральное число nn. Напишите программу, которая создает матрицу размером n \times nn×n заполнив её символами . . Затем заполните символами * среднюю строку и столбец матрицы, главную и побочную диагональ матрицы. Выведите полученную матрицу на экран, разделяя элементы пробелами.

Формат входных данных
На вход программе подается нечетное натуральное число n, \, (n \ge 3)n,(n≥3) — количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести матрицу в соответствии с условием задачи.

"""

n = int(input())
a = [["."] * n for i in range(n)]
for i in range(n):
   a[i][i] = "*"
   a[n - 1 - i][i] = "*"
   a[i][n//2] = "*"
   a[n//2][i] = "*"
print('\n'.join([' '.join([str(i) for i in row]) for row in a]))



"""
Латинским квадратом порядка nn называется квадратная матрица размером n \times nn×n, каждая строка и каждый столбец которой содержат все числа от 11 до nn. Напишите программу, которая проверяет, является ли заданная квадратная матрица латинским квадратом.

Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы: nn строк, по nn чисел в каждой, разделённые пробелами.

Формат выходных данных
Программа должна вывести слово YES, если матрица является латинским квадратом, и слово NO, если не является.

"""

n = int(input())
matrix = [[int(i) for i in input().split()] for _ in range(n)]
for i in range(n):
    if sorted(matrix[i]) != list(range(1, n + 1)) or sorted([matrix[j][i] for j in range(n)]) != list(range(1, n + 1)):
        print('NO')
        break
else:
    print('YES')


"""
В переменную city_name вводится название города (например, Москва), а в переменную city_year – год его основания (например, 11471147). Заполните пропущенную строку таким образом, чтобы в переменной city оказался кортеж из значений этих двух переменных (сначала название города, затем год основания).

"""
city_name = input()
city_year = int(input())
city = tuple([city_name, city_year])
print(city)

"""
Дополните приведенный код, так чтобы получить список, содержащий только непустые кортежи исходного списка tuples, не меняя порядка их следования.

"""
tuples = [(), (), ('',), ('a', 'b'), (), ('a', 'b', 'c'), (1,), (), (), ('d',), ('', ''), ()]
non_empty_tuples = [i for i in tuples if i != tuple()]

print(non_empty_tuples)



"""
Дополните приведенный код так, чтобы переменная new_tuples, содержала список кортежей на основе списка tuples с последним элементом каждого кортежа, замененным на численное значение 100100.

"""
tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90), (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
new_tuples = [i[:-1] + (100,) for i in tuples]
print(new_tuples)

"""
Дополните приведенный код так, чтобы он вывел произведение элементов кортежа numbers.
"""
numbers = (2, 3, 5, 7, -11, 13, 17, 19, 23, 29, 31, -6, 41, 43, 47, 53, 59, 61, -96, 71, 1000, -1)
total = 1
for i in numbers:
    total = i*total
print(total)

"""
Программист Тимур написал программу для работы с биографическими данными русских поэтов. Данные содержатся в кортежах вида (фамилия, год рождения, город рождения). В процессе работы программы в некотором кортеже poet_data обнаружилась ошибка: ('Пушкин', 1799, 'Санкт-Петербург'), неверно указано место рождения, ведь Александр Пушкин родился в Москве.

Дополните приведенный код так, чтобы в переменной poet_data находился правильный кортеж (с исправленным значением), а затем выведите его содержимое.
"""

poet_data = ('Пушкин', 1799, 'Санкт-Петербург')
list_data = list(poet_data)
list_data[2] = 'Москва'
print(tuple(list_data))

"""
Дополните приведенный код так, чтобы он вывел список, содержащий средние арифметические значения чисел каждого вложенного кортежа в заданном кортеже кортежей numbers.
"""

numbers = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (90, 10))

l = []
for i in numbers:
  l.append(sum(i) / len(i))

print(l)

"""
Формат входных данных
На вход программе подаются три целых числа, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести координаты вершины параболы.
"""
def coords(a, b, c):
    x = -(b / (2 * a))
    y = (4 * a * c - b**2) / (4 * a)
    return x, y

result = coords(int(input()), int(input()), int(input()))
print(result)

"""
Напишите программу, которая выводит список хорошистов и отличников в классе.

Формат входных данных
На вход программе подается натуральное число nn, далее следует nn строк с фамилией школьника и его оценкой на каждой из них.

Формат выходных данных
Программа должна вывести сначала все введённые строки с фамилиями и оценками учеников в том же порядке. Затем следует пустая строка, а затем выводятся строки с фамилиями и оценками хорошистов и отличников (в том же порядке).

Примечание 1. Оценка ученика – это натуральное число от 11 до 55.

Примечание 2. Гарантируется, что в классе есть хотя бы один хорошист – обладатель оценки 44, или отличник – получивший 55.
"""

lst = [input().split() for i in range(int(input()))]
    
for i in range(len(lst)):
    print(lst[i][0], lst[i][1])

print()

for i in range(len(lst)):
    if lst[i][1] in '45':
        print(lst[i][0], lst[i][1])



"""
Напишите программу, которая считывает натуральное число nn и выводит первые nn чисел последовательности Трибоначчи.

Формат входных данных
На вход программе подается одно число n\,  (n \le 100)n (n≤100) – количество членов последовательности.

Формат выходных данных
Программа должна вывести члены последовательности Трибоначчи, отделенные символом пробела.
"""

def createTribonacci(limit, init=(2, 0, -1, 1)):
    a, b, c, d = init
    for _ in range(limit):
        a, b, c, d = b, c, d, 2*d - a
        yield d 
 
limit = int(input())
 
gen = createTribonacci(limit, init=(-3, 1, 1, -1))
print(*gen)


"""
На летних каникулах Тимур и ученики онлайн-школы BEEGEEK решили отдохнуть. В результате nn учеников школы поехали отдыхать на море, mm учеников съездили в деревню, а kk учеников сходили в горы. Оказалось, что и в деревне, и на море были xx учеников, а в деревне и в горах — yy учеников. Побывать и в горах, и на море не удалось никому. 

Напишите программу для определения количества учеников в школе, если никто не смог посетить все три места сразу, а zz учеников писали ДВИ по математике для поступления в МГУ, и никуда не ездили.

Формат входных данных
На вход программе подаются числа n, m, k, x, y, zn,m,k,x,y,z, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести одно число в соответствии с условием задачи.
"""

n, m, k, x, y, z = (int(input()) for _ in range(6))
print((n - x) + (m - x - y) + (k - y) + x + y + z)


"""
Ученики 10 класса онлайн-школы BEEGEEK получили задание прочесть на летних каникулах три книги:

«Что такое математика?»;
«Математическая составляющая»;
«100 гениальных идей по математике».

Оказалось, что n учеников прочитали первую книгу, m учеников — вторую, k учеников — третью. Также известно, что x учеников прочли первую или вторую, или обе эти книги, y учеников — вторую или третью, или обе, z учеников — первую и третью, или хотя бы одну из этих двух книг. Полностью выполнили задание только t учеников. Всего в 10 классе учится aa учеников. Напишите программу, которая выводит сколько учеников:

прочитали только одну книгу;
прочитали две книги;
не прочитали ни одной из рекомендованных книг.
"""

n,m,k,x,y,z,t,a = [int(input()) for i in range(8)]
s1 = n + m - x - t
s2 = m + k - y - t
s3 = k + n - z - t
s = (n - s1 - s3 - t) + (m - s1 - s2 - t) + (k - s2 - s3 - t) # только одну книгу
print(s)  # только одну книгу
print(s1 + s2 + s3)  # только две книги
print(a - s - s1 - s2 - s3 -t )  # ничего не прочитали



"""
Дополните приведенный код так, чтобы он вывел сумму минимального и максимального элементов множества numbers.
"""

numbers = {1.414, 12.5, 3.1415, 2.718, 9.8, 1.414, 1.1618, 1.324, 2.718, 1.324}

print(max(numbers)+min(numbers))

"""
Дополните приведенный код, чтобы он вывел среднее арифметическое элементов множества numbers.
"""

numbers = {20, 6, 8, 18, 18, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 12, 8, 8, 10, 4, 2, 2, 2, 16, 20}
average = sum(numbers)/len(numbers)

print(average)

"""
Дополните приведенный код, чтобы он вывел сумму квадратов элементов множества numbers.
"""
numbers = {9089, -67, -32, 1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111, 111, 1, 23}
x = []
for i in numbers:
    x.append(i**2)
print (sum(set(x)))

"""
Дополните приведенный код, чтобы он вывел элементы множества fruits, каждый на отдельной строке, отсортированные по убыванию (в обратном лексикографическом порядке).

Примечание. Выводите каждый элемент множества на отдельной строке.
"""

fruits = {'apple', 'banana', 'cherry', 'avocado', 'pineapple', 'apricot', 'banana', 'avocado', 'grapefruit'}
fruits_sorted = sorted(fruits, reverse=True)
for i in fruits_sorted:
    print (i)


"""
На вход программе подается строка, состоящая из цифр. Необходимо определить, верно ли, что в ее записи ни одна из цифр не повторяется?

Формат входных данных
На вход программе подается строка, состоящая из цифр

Формат выходных данных
Программа должна вывести YES если ни одна из цифр в строке не повторяется и NO в противном случае.
"""

string = str(input())
if len(string)==len(set(string)):
    print ('YES')
else:
    print ('NO')


"""
На вход программе подаются две строки, состоящие из цифр. Необходимо определить, верно ли, что в записи этих двух строк используются все десять цифр?

Формат входных данных
На вход подаются две строки, состоящие из цифр.

Формат выходных данных
Программа должна вывести YES, если в записи этих двух строк используются все десять цифр, и NO в противном случае.
"""

x, y = str(input()), str(input())
if len(set(x+y)) >= 10:
    print ('YES')
else:
    print ('NO')

"""
На вход программе подаются две строки, состоящие из цифр. Необходимо определить, верно ли, что для записи этих строк были использованы одинаковые наборы цифр?

Формат входных данных
На вход подаются две строки, состоящие из цифр.

Формат выходных данных
Программа должна вывести YES, если для записи этих строк были использованы одинаковые наборы цифр и NO, в противном случае.
"""

x, y = set(input()), set(input())
if x==y:
    print ('YES')
else:
    print ('NO')




"""
На вход программе подается строка, состоящая из трех слов. Верно ли, что для записи всех трех слов был использован один и тот же набор букв?

Формат входных данных
На вход программе подается строка, состоящая из трех слов.

Формат выходных данных
Программа должна вывести YES, если для записи всех трех слов был использован один и тот же набор букв и NO в противном случае.
"""

x, y, z = input().split(' ')
if set(x)==set(y) and set(y)==set(z):
    print('YES')
else:
    print('NO')

"""
Напишите программу для вывода количества уникальных символов каждого считанного слова без учета регистра.

Формат входных данных
На вход программе в первой строке подается число nn – общее количество слов. Далее идут nn строк с словами.

Формат выходных данных
Программа должна вывести на отдельной строке количество уникальных символов для каждого слова.
"""
lst = []
for i in range(int(input())):
    lst.append(len(set(input().lower())))
print(*lst, sep='\n')




"""
Напишите программу для вывода общего количества уникальных символов во всех считанных словах без учета регистра.

Формат входных данных
На вход программе в первой строке подается число nn – общее количество слов. Далее идут nn строк со словами.

Формат выходных данных
Программа должна вывести одно число – общее количество уникальных символов во всех словах без учета регистра.
"""

a = set()
for _ in range(int(input())):
    b = input().lower()
    for j in b:
        a.add(j)
print(len(a))

"""
Напишите программу для определения общего количества различных слов в строке текста.

Формат входных данных
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести одно число – общее количество различных слов в строке без учета регистра.

Примечание 1. Словом считается последовательность непробельных символов, идущих подряд, слова разделены одним или большим числом пробелов.

Примечание 2. Знаками препинания .,;:-?! пренебрегаем.
"""

x = input().lower().split(' ')
y = set()
for i in x:
    y.add(i.strip(".,;:-?!"))
print (len(y))

"""
На вход программе подается строка текста, содержащая числа. Для каждого числа выведите слово YES (в отдельной строке), если это число ранее встречалось в последовательности или NO, если не встречалось.

Формат входных данных
На вход программе подается строка текста, содержащая числа, разделенные символом пробела.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Ведущие нули в числах должны игнорироваться.
"""

numbers = [int(s) for s in input().split()]
occur_before = set()
for num in numbers:
    if num in occur_before:
        print('YES')
    else:
        print('NO')
        occur_before.add(num)


"""
На вход программе подаются две строки текста, содержащие числа. Напишите программу, которая определяет количество чисел, которые есть как в первой строке, так и во второй.

Формат входных данных
На вход программе подаются две строки текста, содержащие числа, отделенные символом пробела.

Формат выходных данных
Программа должна вывести количество чисел, содержащихся одновременно как в первой строке, так и во второй.
"""

str1, str2 = str(input()).split(' '), str(input()).split(' ')
print(len(set(str1) & set(str2)))


"""
На вход программе подаются две строки текста, содержащие числа. Напишите программу, которая выводит все числа в порядке возрастания, которые есть как в первой строке, так и во второй.

Формат входных данных
На вход программе подаются две строки текста, содержащие числа, отделенные символом пробела.

Формат выходных данных
Программа должна вывести множество чисел, встречающихся в обеих строках.
"""

str1, str2 = set([int(i) for i in input().split()]), set([int(i) for i in input().split()])
print(*sorted(str1 & str2))

"""
На вход программе подаются две строки текста, содержащие числа. Напишите программу, которая выводит все числа в порядке возрастания, которые есть в первой строке, но отсутствуют во второй.

Формат входных данных
На вход программе подаются две строки текста, содержащие числа, отделенные символом пробела.

Формат выходных данных
Программа должна вывести множество чисел, встречающихся только в первой строке.
"""
str1, str2 = set([int(i) for i in input().split()]), set([int(i) for i in input().split()])
print(*sorted(str1 - str2))



"""
На вход программе подается натуральное число nn, а затем nn различных натуральных чисел, каждое на отдельной строке. Напишите программу, которая выводит все общие цифры в порядке возрастания у всех введенных чисел.

Формат входных данных
На вход программе подаются натуральное число n \ge 1n≥1, а затем nn различных натуральных чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести цифры в соответствии с условием задачи. Если общих цифр нет, то ничего выводить не нужно.
"""
n = int(input())
digits = [set(input()) for _ in range(n)]
myset = set(digits[0])
for i in range(1, n):
    myset.intersection_update(digits[i])
    
print(*sorted(myset))


"""
На вход программе подаются два числа. Напишите программу, определяющую, есть ли в данных числах одинаковые цифры.

Формат входных данных
На вход программе подаются два натуральных числа, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести YES, если в записи данных чисел есть одинаковые цифры и NO если нет.
"""

print(("YES", "NO")[set(input()).isdisjoint(input())])

"""
На вход программе подаются два числа. Напишите программу, которая определяет, входят ли в запись первого числа все цифры, содержащиеся в записи второго (независимо от повтора, то есть количества цифр) числа или нет.

Формат входных данных
На вход программе подаются два натуральных числа, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести YES, если в запись первого числа входят все цифры, содержащиеся в записи второго числа и NO в противном случае.
"""

x, y = set(input()), set(input())
if x.issuperset(y):
    print('YES')
else:
    print('NO')

"""
Даны по 1010-балльной шкале оценки по информатике трех учеников. Напишите программу, которая выводит множество оценок, которые есть и у первого и у второго учеников, но которых нет у третьего ученика.

Формат входных данных
На вход программе подаются оценки трех учеников, разделенные символом пробела (оценки каждого ученика на отдельной строке).

Формат выходных данных
Программа должна вывести множество оценок в порядке убывания на одной строке, разделенных пробелами, в соответствии с условием задачи.

Примечание. Оценка ученика находится в диапазоне от 00 до 1010 включительно.
"""
a, b, c = (set(int(i) for i in input().split()) for i in range(3))
print(*sorted(set(a.intersection(b).difference(c)))[::-1])


"""
Даны по 1010-балльной шкале оценки по математике трех учеников. Напишите программу, которая выводит множество оценок, имеющихся у учеников, которые встречаются не более, чем у двух из указанных учеников.

Формат входных данных
На вход программе подаются оценки трех учеников, разделенные символом пробела (оценки каждого ученика на отдельной строке).

Формат выходных данных
Программа должна вывести множество оценок в порядке возрастания на одной строке, разделенных пробелами, в соответствии с условием задачи.

Примечание. Оценка ученика находится в диапазоне от 00 до 1010 включительно.
"""

set1, set2, set3 = [set([int(i) for i in input().split()]) for k in range(3)]
print(*sorted((set1 | set2 | set3) - (set1 & set2 & set3)))


"""
Даны по 1010-балльной шкале оценки по физике трех учеников. Напишите программу, которая выводит множество оценок третьего ученика, которые не встречаются ни у первого, ни у второго ученика.

Формат входных данных
На вход программе подаются оценки трех учеников, разделенные символом пробела (оценки каждого ученика на отдельной строке).

Формат выходных данных
Программа должна вывести множество оценок в порядке убывания на одной строке, разделенных пробелами, в соответствии с условием задачи.

Примечание. Оценка ученика находится в диапазоне от 00 до 1010 включительно.
"""

set_1, set_2, set_3 = (set(input().split()) for _ in range(3))
print(*(sorted(set_3 - (set_1 | set_2), key=int, reverse=True)))

"""
Даны по 1010-балльной шкале оценки по биологии трех учеников. Напишите программу, которая выводит множество оценок, не встречающихся ни у одного из трех учеников.

Формат входных данных
На вход программе подаются оценки трех учеников, разделенные символом пробела (оценки каждого ученика на отдельной строке).

Формат выходных данных
Программа должна вывести множество оценок в порядке возрастания на одной строке, разделенных пробелами, в соответствии с условием задачи.

Примечание. Оценка ученика находится в диапазоне от 00 до 1010 включительно.
"""

a = set(input().split() + input().split() + input().split())
b = set(map(str, range(11)))
print(*sorted(b -  a, key=int))


"""
Используя генератор множеств, дополните приведенный код, так чтобы получить множество, содержащее уникальные значения списка items. Результат вывести на одной строке, в упорядоченном виде, разделяя элементы одним символом пробела.

Примечание 1. Обратите внимание, некоторые элементы списка – числа, а некоторые – строки, при этом строки необходимо трактовать как числа.

Примечание 2. Чтобы вывести элементы множества в упорядоченном виде используйте следующий код:
"""

items = [10, '30', 30, 10, '56', 34, '12', 90, 89, 34, 45, '67', 12, 10, 90, 23, '45', 56, '56', 1, 5, '6', 5]
myset = {int(i) for i in items}
print(*sorted(myset))



"""
Используя генератор множеств, дополните приведенный код, так чтобы получить множество, содержащее первую букву каждого слова (в нижнем регистре) списка words. Результат вывести на одной строке в алфавитном порядке, разделяя элементы одним символом пробела.

"""

words = ['Plum', 'Grapefruit', 'apple', 'orange', 'pomegranate', 'Cranberry', 'lime', 'Lemon', 'grapes', 'persimmon', 'tangerine', 'Watermelon', 'currant', 'Almond']
print(*sorted({i[0].lower() for i in words}))


"""
Используя генератор множеств, дополните приведенный код, так чтобы получить множество, содержащее уникальные слова (в нижнем регистре) строки sentence. Результат вывести на одной строке в алфавитном порядке, разделяя элементы одним символом пробела.

Примечание. Учтите, что знаки пунктуации не относятся к словам.
"""

import re
sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and, save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory, over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely, you all know those redolent remnants of day suspended, with the midges, about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk; a furry warmth, golden midges.'''
string = re.sub(r"[-()\"#/@;:<>{}`+=~|.!?,]", "", sentence)
list = string.lower().split()
myset = {i for i in list if len(i) < 4}
print(*sorted(myset))


"""
Используя генератор множеств, дополните приведенный код так, чтобы он выбрал из списка files уникальные имена файлов c расширением .png, независимо от регистра имен и расширений. Имена файлов вывести вместе с расширением, все на одной строке, в нижнем регистре, в алфавитном порядке через пробел.
"""
files = ['python.png', 'qwerty.py', 'stepik.png', 'beegeek.org', 'windows.pnp', 'pen.txt', 'phone.py', 'book.txT', 'board.pNg', 'keyBoard.jpg', 'Python.PNg', 'apple.jpeg', 'png.png', 'input.tXt', 'split.pop', 'solution.Py', 'stepik.org', 'kotlin.ko', 'github.git']
result = {c.lower() for c in files if c.lower().endswith('.png')}
print(*sorted(result))


"""
Каждый ученик, обучающийся в онлайн-школе BEEGEEK изучает либо математику, либо информатику, либо оба эти предмета. У руководителя школы есть списки изучающих каждый предмет.

Напишите программу, позволяющую руководителю выяснить, сколько учеников изучает только математику.

Формат входных данных
На вход программе в первых двух строках подаются числа mm и nn – количества учеников, изучающих математику и информатику соответственно. Далее идут mm строк — фамилии учеников, которые изучают математику и nn строк с фамилиями учеников, изучающих информатику.

Формат выходных данных
Программа должна вывести количество учеников, которые изучают только математику.

Примечание. Гарантируется, что среди учеников школы BEEGEEK нет однофамильцев.
"""
m, n = int(input()), int(input())
mathematics_pupil = {input() for _ in range(m)}
informatics_pupil = {input() for _ in range(n)}
print(len(mathematics_pupil.difference(informatics_pupil)))



"""
Каждый ученик, обучающийся в онлайн-школе BEEGEEK изучает либо математику, либо информатику, либо оба этих предмета. У руководителя школы есть списки изучающих каждый предмет.

Напишите программу, позволяющую руководителю выяснить, сколько учеников изучает только один предмет.

Формат входных данных
На вход программе в первых двух строках подаются числа mm и nn – количества учеников, изучающих математику и информатику соответственно. Далее идут mm строк — фамилии учеников, которые изучают математику и nn строк с фамилиями учеников, изучающих информатику.

Формат выходных данных
Программа должна вывести количество учеников, которые изучают только один предмет. Если таких учеников не окажется, то необходимо вывести NO.

Примечание. Гарантируется, что среди учеников школы BEEGEEK нет однофамильцев.
"""
m, n = int(input()), int(input())
mathematics_pupil = {input() for _ in range(m)}
informatics_pupil = {input() for _ in range(n)}

if len(mathematics_pupil.symmetric_difference(informatics_pupil)) >=1:
    print(len(mathematics_pupil.symmetric_difference(informatics_pupil)))
else:
    print('NO')

"""
Руководитель онлайн-школы BEEGEEK и его помощник составили списки учеников их школы.

Напишите программу, которая выведет все фамилии учеников, которые вспомнили руководитель и его помощник.

Формат входных данных
На вход программе в первой строке подаются фамилии, записанные руководителем школы, а на второй строке - помощником руководителя. Фамилии указываются через пробел.

Формат выходных данных
Программа должна вывести все фамилии учеников, отсортированных в лексикографическом порядке, записанные руководителем и его помощником.

Примечание. Гарантируется, что среди учеников школы BEEGEEK нет однофамильцев.
"""

m, n = set(input().split(' ')), set(input().split(' '))
print(*sorted(m.union(n)))

"""
Как известно, математики странные люди. Не составляет исключения и Тимур — автор данного курса. Каждый день Тимур решает ровно две сложные математические задачи. Решая первую задачу, он записывает на первом листочке все числа, которые в ней встречаются. Далее он делает паузу и берется за вторую задачу. Затем записывает на втором листочке все числа, которые в ней встречаются. После этого он берет еще один листок и выписывает на него все совпадающие числа из первых двух листочков. Если такие числа есть, день удался, если общих чисел нет, Тимур считает день неудачным.

Напишите программу, которая находит общие числа двух листочков или сообщает, что день не удался 😏

Формат входных данных
На вход программе подаются две строки с числами: в первой строке числа с первого листочка, во второй со второго.

Формат выходных данных
Программа должна вывести числа, встретившиеся на обоих листках в отсортированном по убыванию порядке, либо словосочетание BAD DAY, если таких чисел нет.
"""

m, n = set(input().split(' ')), set(input().split(' '))
if len(m.intersection(n))>0:
    print(*sorted(m.intersection(n), reverse=True, key=int))
else:
    print('BAD DAY')




"""
Каждый ученик, обучающийся в онлайн-школе BEEGEEK изучает либо математику, либо информатику, либо оба этих предмета. У руководителя школы есть списки учеников, изучающих каждый предмет. Случайно списки всех учеников перемешались.

Напишите программу, которая позволит руководителю выяснить, сколько учеников изучает только один предмет.

Формат входных данных
На вход программе в первых двух строках подаются числа mm и nn – количества учеников, изучающих математику и информатику соответственно. Далее идут m+nm+n строк — фамилии учеников, изучающих математику и информатику, в произвольном порядке.

Формат выходных данных
Программа должна вывести количество учеников, которые изучают только один предмет. Если таких учеников не окажется, то необходимо вывести NO.

Примечание. Гарантируется, что среди учеников школы BEEGEEK нет однофамильцев.
"""
m, n = int(input()), int(input())
set_all = {input() for _ in range(m + n)}
print(['NO', 2 * len(set_all) - (m + n)][2 * len(set_all) != m + n])



"""
Руководителю онлайн-школы BEEGEEK захотелось узнать, кто из его учеников присутствовал на всех уроках с начала учебного года. Для каждого урока есть листок со списком присутствовавших учеников.

Напишите программу, определяющую фамилии учеников, которые присутствовали на всех уроках.

Формат входных данных
На вход программе в первой строке дается число mm – количество уроков, проведенных с начала учебного года. Далее идёт mm блоков строк, описывающих листки с фамилиями. На первой строке каждого блока указано количество фамилий n_in 
i, затем идёт n_in 
i строчек с фамилиями тех, кто был на ii-ом уроке.

Формат выходных данных
Программа должна вывести фамилии учеников, которые были на всех уроках, отсортированных в лексикографическом порядке. Каждая фамилия должна быть записана на отдельной строке.

Примечание 1. Гарантируется, что среди учеников школы BEEGEEK нет однофамильцев.

Примечание 2. Гарантируется, что хотя бы один ученик был на всех уроках.
"""
n = int(input())
result = {input() for _ in range(int(input()))}

for _ in range(n - 1):
    result &= {input() for _ in range(int(input()))}
    
print(*sorted(result), sep='\n')


"""
Дополните приведенный код, чтобы он вывел имена всех пользователей (в алфавитном порядке), чей номер оканчивается на 88.

Примечание. Имена необходимо вывести на одной строке, разделяя символом пробела.
"""
users = [{'name': 'Todd', 'phone': '551-1414', 'email': 'todd@gmail.com'},
         {'name': 'Helga', 'phone': '555-1618', 'email': 'helga@mail.net'},
         {'name': 'Olivia', 'phone': '449-3141', 'email': ''},
         {'name': 'LJ', 'phone': '555-2718', 'email': 'lj@gmail.net'},
         {'name': 'Ruslan', 'phone': '422-145-9098', 'email': 'rus-lan.cha@yandex.ru'},
         {'name': 'John', 'phone': '233-421-32', 'email': ''},
         {'name': 'Lara', 'phone': '+7998-676-2532', 'email': 'g.lara89@gmail.com'},
         {'name': 'Alina', 'phone': '+7948-799-2434', 'email': 'ali.ch.b@gmail.com'},
         {'name': 'Robert', 'phone': '420-2011', 'email': ''},
         {'name': 'Riyad', 'phone': '128-8890-128', 'email': 'r.mahrez@mail.net'},
         {'name': 'Khabib', 'phone': '+7995-600-9080', 'email': 'kh.nurmag@gmail.com'},
         {'name': 'Olga', 'phone': '6449-314-1213', 'email': ''},
         {'name': 'Roman', 'phone': '+7459-145-8059', 'email': 'roma988@mail.ru'},
         {'name': 'Maria', 'phone': '12-129-3148', 'email': 'm.sharapova@gmail.com'},
         {'name': 'Fedor', 'phone': '+7445-341-0545', 'email': ''},
         {'name': 'Tim', 'phone': '242-449-3141', 'email': 'timm.ggg@yandex.ru'}]

users.sort(key=lambda x: x['name'])
print(*[i['name'] for i in list(filter(lambda x: x['phone'].endswith('8'), users))])


"""
Дополните приведенный код, чтобы он вывел имена всех пользователей (в алфавитном порядке), у которых нет информации об электронной почте. 

Примечание 1. Ключ email может отсутствовать в словаре.

Примечание 2. Имена необходимо вывести на одной строке, разделяя символом пробела.
"""

users = [{'name': 'Todd', 'phone': '551-1414', 'email': 'todd@gmail.com'},
         {'name': 'Helga', 'phone': '555-1618'},
         {'name': 'Olivia', 'phone': '449-3141', 'email': ''},
         {'name': 'LJ', 'phone': '555-2718', 'email': 'lj@gmail.net'},
         {'name': 'Ruslan', 'phone': '422-145-9098', 'email': 'rus-lan.cha@yandex.ru'},
         {'name': 'John', 'phone': '233-421-32', 'email': ''},
         {'name': 'Lara', 'phone': '+7998-676-2532', 'email': 'g.lara89@gmail.com'},
         {'name': 'Alina', 'phone': '+7948-799-2434'},
         {'name': 'Robert', 'phone': '420-2011', 'email': ''},
         {'name': 'Riyad', 'phone': '128-8890-128', 'email': 'r.mahrez@mail.net'},
         {'name': 'Khabib', 'phone': '+7995-600-9080', 'email': 'kh.nurmag@gmail.com'},
         {'name': 'Olga', 'phone': '6449-314-1213', 'email': ''},
         {'name': 'Roman', 'phone': '+7459-145-8059'},
         {'name': 'Maria', 'phone': '12-129-3148', 'email': 'm.sharapova@gmail.com'},
         {'name': 'Fedor', 'phone': '+7445-341-0545', 'email': ''},
         {'name': 'Tim', 'phone': '242-449-3141', 'email': 'timm.ggg@yandex.ru'}]
print(*sorted( [ dc['name'] for dc in users if dc.get('email', '') == '' ] ))


"""
На мобильных кнопочных телефонах текстовые сообщения можно отправлять с помощью цифровой клавиатуры. Поскольку с каждой клавишей связано несколько букв, для большинства букв требуется несколько нажатий клавиш. При однократном нажатии цифры генерируется первый символ, указанный для этой клавиши. Нажатие цифры 2, 3, 42,3,4 или 55 раз генерирует второй, третий, четвертый или пятый символ клавиши.
"""

d={".":'1', ",":'11', "?":'111', "!":'1111', ":":'11111',
    "A":'2', "B":'22', "C":'222',
    "D":'3', "E":'33', "F":'333',
    "G":'4', "H":'44', "I":'444',
    "J":'5', "K":'55', "L":'555',
    "M":'6', "N":'66', "O":'666',
    "P":'7', "Q":'77', "R":'777', "S": '7777',
    "T":'8', "U":'88', "V":'888',
    "W":'9', "X":'99', "Y":'999', "Z": '9999',
    " ":'0'
}
resyl = []
string = list(input().upper().replace('"', ''))
for i in string:
    resyl.append(d[i.upper()])
print(''.join(resyl))

"""
Код Морзе для представления цифр и букв использует тире и точки.

Напишите программу для кодирования текстового сообщения в соответствии с кодом Морзе.
"""

letters = [c for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789']
morse = ['.-', '-...', '-.-.', '-..', '.', '..-.', '--.', '....', '..', '.---', '-.-', '.-..', '--', '-.', '---', '.--.', '--.-', '.-.', '...', '-', '..-', '...-', '.--', '-..-', '-.--', '--..', '-----', '.----', '..---', '...--', '....-', '.....', '-....', '--...', '---..', '----.']

work_map = dict(zip(letters, morse))

input_string = input().upper()
output_string = (work_map.get(letter) for letter in input_string if work_map.get(letter))

print(' '.join(output_string))

"""
Дополните приведенный код, чтобы в переменной result хранился словарь, в котором ключи – числа от 11 до 1515 (включительно), а значения представляют собой квадраты ключей.

Примечание. Выводить содержимое словаря result не нужно.
"""

result = {x: x**2 for x in range(1,16)}


"""
Дополните приведенный код так, чтобы он объединил содержимое двух словарей dict1 и dict2 по ключам, складывая значения по одному и тому же ключу, в случае, если ключ присутствует в обоих словарях. Результирующий словарь необходимо присвоить переменной result.

Примечание. Выводить содержимое словаря result не нужно.
"""
dict1 = {'a': 100, 'z': 333, 'b': 200, 'c': 300, 'd': 45, 'e': 98, 't': 76, 'q': 34, 'f': 90, 'm': 230}
dict2 = {'a': 300, 'b': 200, 'd': 400, 't': 777, 'c': 12, 'p': 123, 'w': 111, 'z': 666}

for key, value in dict2.items():
    dict1[key] = dict1.setdefault(key, 0) + value
result = dict1.copy()

"""
Дополните приведенный код так, чтобы в переменной result хранился словарь, в котором для каждого символа строки text будет подсчитано количество его вхождений.

Примечание. Выводить содержимое словаря result не нужно.
"""

text = 'footballcyberpunkextraterritorialityconversationalistblockophthalmoscopicinterdependencemamauserfff'

result = {}
for num in text:
    result[num] = result.get(num, 0) + 1

"""
Дополните приведенный код, чтобы он вывел наиболее часто встречающееся слово строки s. Если таких слов несколько, должно быть выведено то, что меньше в лексикографическом порядке.
"""

s = 'orange strawberry barley gooseberry apple apricot barley currant orange melon pomegranate banana banana orange barley apricot plum grapefruit banana quince strawberry barley grapefruit banana grapes melon strawberry apricot currant currant gooseberry raspberry apricot currant orange lime quince grapefruit barley banana melon pomegranate barley banana orange barley apricot plum banana quince lime grapefruit strawberry gooseberry apple barley apricot currant orange melon pomegranate banana banana orange apricot barley plum banana grapefruit banana quince currant orange melon pomegranate barley plum banana quince barley lime grapefruit pomegranate barley'

res = {}
for w in s.split():
    res[w] = res.get(w, 0) + 1  
print(min(res, key=lambda x: (-res[x], x)))


"""
Вам доступен список pets, содержащий информацию о собаках и их владельцах.  Каждый элемент списка – это кортеж вида (кличка собаки, имя владельца, фамилия владельца, возраст владельца).

Дополните приведенный код так, чтобы в переменной result хранился словарь, в котором для каждого владельца будут перечислены его собаки. Ключом словаря должен быть кортеж (имя, фамилия, возраст владельца), а значением – список кличек собак (сохранив исходный порядок следования).

Примечание 1. Не забывайте: кортежи являются неизменяемыми, поэтому могут быть ключами словаря.

Примечание 2. Обратите внимание, что у некоторых владельцев по несколько собак.

Примечание 3. Выводить содержимое словаря result не нужно.
"""

pets = [('Hatiko', 'Parker', 'Wilson', 50),
        ('Rusty', 'Josh', 'King', 25),
        ('Fido', 'John', 'Smith', 28),
        ('Butch', 'Jake', 'Smirnoff', 18),
        ('Odi', 'Emma', 'Wright', 18),
        ('Balto', 'Josh', 'King', 25),
        ('Barry', 'Josh', 'King', 25),
        ('Snape', 'Hannah', 'Taylor', 40),
        ('Horry', 'Martha', 'Robinson', 73),
        ('Giro', 'Alex', 'Martinez', 65),
        ('Zooma', 'Simon', 'Nevel', 32),
        ('Lassie', 'Josh', 'King', 25),
        ('Chase', 'Martha', 'Robinson', 73),
        ('Ace', 'Martha', 'Williams', 38),
        ('Rocky', 'Simon', 'Nevel', 32)]

result = {}

for x, *name in pets:
    result.setdefault(tuple(name), []).append(x)